<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta charset="UTF-8" />
		<style>body {font-family: IPAmjMincho;} pre {font-family: IPAmjMincho; white-space: pre-wrap;}</style>
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" />
		<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/leaflet-polylineoffset@1.1.1/leaflet.polylineoffset.js"></script>
		<script src="https://cdn.jsdelivr.net/npm/zlibjs@0.3.1/bin/unzip.min.js"></script>
		<script>
			//<![CDATA[
			//Uin32Array = Uint32Array; //これがないとhttps://cdn.jsdelivr.net/npm/zlibjs@0.3.1/bin/unzip.min.jsがエラーになる
			//]]>
		</script>
		<title>豐多摩研究所 Leaflet Polyline Offsetの使用例</title>
	</head>
	<body>
		<h1>豐多摩研究所 Leaflet Polyline Offsetの使用例</h1>
		<p>2019-10-07 作成</p>
		<p><a href="https://github.com/bbecquet/Leaflet.PolylineOffset">https://github.com/bbecquet/Leaflet.PolylineOffset</a>を用いている。</p>
		<div id="div_leaflet" style="width: auto; height: 768px;"></div>
		<script type="module">
		//<![CDATA[
//moduleについて
//XHTMLは大丈夫そう
//.mjsはFirefoxが不可
//パスは/か./か../ではじめないといけない？
//CORSでローカルだとうまくいかない

import {f_xhr_get} from "./js/f_xhr_get.js";
import {f_zip_to_text} from "./js/f_zip_to_text.js";
import {f_csv_to_json} from "./js/f_csv_to_json.js";
import {f_prepare_gtfs} from "./js/f_prepare_gtfs.js";
import {f_make_bmd} from "./js/f_make_bmd.js";


async function f_read_gtfs() {
	const c_text = await f_zip_to_text("https://toyotamakenkyusyo.github.io/gtfs/3270001000564/next/GTFS-JP.zip", f_xhr_get);
	const c_data = {};
	for (let i1 in c_text) {
		c_data[i1.replace(/.txt/, "")] = f_csv_to_json(c_text[i1]);
	}
	f_prepare_gtfs(c_data);
	const c_bmd = f_make_bmd(c_data);
	console.log(c_bmd);
	f_leaflet(c_bmd);
}
f_read_gtfs();

function f_leaflet(a_bmd) {
	let map = L.map("div_leaflet");
	L.tileLayer("https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png", {"attribution": "<a href=\"https://maps.gsi.go.jp/development/ichiran.html\">地理院タイル</a>", "opacity": 0.25}).addTo(map);
	
	const c_index = {};
	for (let i1 = 0; i1 < a_bmd["ur_stops"].length; i1++) {
		c_index[a_bmd["ur_stops"][i1]["stop_id"]] = a_bmd["ur_stops"][i1];
	}
	for (let i1 = 0; i1 < a_bmd["parent_stations"].length; i1++) {
		c_index[a_bmd["parent_stations"][i1]["stop_id"]] = a_bmd["parent_stations"][i1];
	}
	for (let i1 = 0; i1 < a_bmd["ur_routes"].length; i1++) {
		c_index[a_bmd["ur_routes"][i1]["route_id"]] = a_bmd["ur_routes"][i1];
	}
	
	const c_parent_route_id = "jp_parent_route_id";
	const c_parent_routes = [];
	for (let i1 = 0; i1 < a_bmd["ur_routes"].length; i1++) {
		let l_exist = false;
		for (let i2 = 0; i2 < c_parent_routes.length; i2++) {
			if (a_bmd["ur_routes"][i1][c_parent_route_id] === c_parent_routes[i2]["parent_route_id"]) {
				l_exist = true;
				break;
			}
		}
		if (l_exist === false) {
			c_parent_routes.push({"parent_route_id": a_bmd["ur_routes"][i1][c_parent_route_id], "route_color": a_bmd["ur_routes"][i1]["route_color"]});
		}
	}
	
	for (let i1 = 0; i1 < c_parent_routes.length; i1++) {
		c_index[c_parent_routes[i1]["parent_route_id"]] = c_parent_routes[i1];
	}
	
	const c_segments = [];
	for (let i1 = 0; i1 < a_bmd["ur_routes"].length; i1++) {
		const c_route_id = a_bmd["ur_routes"][i1][c_parent_route_id];
		for (let i2 = 0; i2 < a_bmd["ur_routes"][i1]["stop_array"].length - 1; i2++) {
			let l_start = a_bmd["ur_routes"][i1]["stop_array"][i2]["stop_id"];
			let l_end = a_bmd["ur_routes"][i1]["stop_array"][i2 + 1]["stop_id"];
			if (c_index[l_start]["parent_station"] !== undefined && c_index[l_start]["parent_station"] !== null && c_index[l_start]["parent_station"] !== "") {
				l_start = c_index[l_start]["parent_station"];
			}
			if (c_index[l_end]["parent_station"] !== undefined && c_index[l_end]["parent_station"] !== null && c_index[l_end]["parent_station"] !== "") {
				l_end = c_index[l_end]["parent_station"];
			}
			let l_exist = false;
			for (let i3 = 0; i3 < c_segments.length; i3++) {
				if ((l_start === c_segments[i3]["start"] && l_end === c_segments[i3]["end"]) || (l_start === c_segments[i3]["end"] && l_end === c_segments[i3]["start"])) {
					let l_exist_2 = false;
					for (let i4 = 0; i4 < c_segments[i3]["routes"].length; i4++) {
						if (c_segments[i3]["routes"][i4] === c_route_id) {
							l_exist_2 = true;
							break;
						}
					}
					if (l_exist_2 === false) {
						c_segments[i3]["routes"].push(c_route_id);
					}
					l_exist = true;
					break;
				}
			}
			if (l_exist === false) {
				c_segments.push({"start": l_start, "end": l_end, "routes": [c_route_id]});
			}
		}
	}
	
	for (let i1 = 0; i1 < c_segments.length; i1++) {
		const c_start = c_segments[i1]["start"];
		const c_end = c_segments[i1]["end"];
		const c_coordinates = [[c_index[c_start]["stop_lat"], c_index[c_start]["stop_lon"]], [c_index[c_end]["stop_lat"], c_index[c_end]["stop_lon"]]];
		
		const c_offset = (c_segments[i1]["routes"].length - 1) / 2;
		for (let i2 = 0; i2 < c_segments[i1]["routes"].length; i2++) {
			L.polyline(c_coordinates, {"color": "#" + c_index[c_segments[i1]["routes"][i2]]["route_color"], "offset": 8 * (i2 - c_offset)}).addTo(map);
		}
	}
	
	const c_stops = "parent_stations"; //"ur_stops"
	for (let i1 = 0; i1 < a_bmd[c_stops].length; i1++) {
		const c_coordinates = [a_bmd[c_stops][i1]["stop_lat"], a_bmd[c_stops][i1]["stop_lon"]];
		L.circleMarker(c_coordinates, {"color": "#000000", "fillColor": "#c0c0c0", "fillOpacity": 1, "radius": 8, "weight": 4, "opacity": 1}).addTo(map);
		L.marker(c_coordinates, {"icon": L.divIcon({"html": a_bmd[c_stops][i1]["stop_name"], className: "className", iconSize: [256, 16], iconAnchor: [-16, -16]})}).addTo(map);
		if (i1 === 0) {
			map.setView(c_coordinates, 12);
		}
	}
}

		//]]>
		</script>
	</body>
</html>
