<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<meta charset="UTF-8" />
		<style>body {font-family: IPAmjMincho;} pre {font-family: IPAmjMincho; white-space: pre-wrap;}</style>
		<link rel="stylesheet" href="https://unpkg.com/leaflet@1.3.1/dist/leaflet.css" />
		<script src="https://unpkg.com/leaflet@1.3.1/dist/leaflet.js"></script>
		<script src="http://bbecquet.github.io/Leaflet.PolylineOffset/leaflet.polylineoffset.js"></script>
		<title>豐多摩研究所 leaflet.polylineoffset.jsの使用例</title>
	</head>
	<body>
		<h1>豐多摩研究所 leaflet.polylineoffset.jsの使用例</h1>
		<p>2019-10-07 作成</p>
		<p>apiは<a href="http://kamelong.com/JPTI/testAPI.html">http://kamelong.com/JPTI/testAPI.html</a>にあるものを用いている。</p>
		<div id="div_leaflet" style="width: auto; height: 768px;"></div>
		<script type="text/javascript">
		//<![CDATA[
f_leaflet();
async function f_leaflet() {
	map = L.map("div_leaflet");
	L.tileLayer("https://cyberjapandata.gsi.go.jp/xyz/pale/{z}/{x}/{y}.png", {"attribution": "<a href=\"https://maps.gsi.go.jp/development/ichiran.html\">地理院タイル</a>", "opacity": 0.25}).addTo(map);
	
	const c_settings = {"url": "https://kamelong.com/nodeJS/api?minLat=34&maxLat=36&minLon=135&maxLon=136&zoomLevel=10"};
	const c_api = JSON.parse((await f_xhr_get(c_settings["url"], "text")).responseText);
	
	const c_segments = [];
	for (let i1 in c_api["route"]) {
		for (let i2 = 0; i2 < c_api["route"][i1]["stationList"].length - 1; i2++) {
			const c_start = c_api["route"][i1]["stationList"][i2];
			const c_end = c_api["route"][i1]["stationList"][i2 + 1];
			let l_exist = false;
			for (let i3 = 0; i3 < c_segments.length; i3++) {
				if ((c_start === c_segments[i3]["start"]["id"] && c_end === c_segments[i3]["end"]["id"]) || (c_start === c_segments[i3]["end"]["id"] && c_end === c_segments[i3]["start"]["id"])) {
					c_segments[i3]["routes"].push(c_api["route"][i1]);
					l_exist = true;
					break;
				}
			}
			if (l_exist === false) {
				c_segments.push({"start": c_api["station"][c_start], "end": c_api["station"][c_end], "routes": [c_api["route"][i1]]});
			}
		}
	}
	
	for (let i1 = 0; i1 < c_segments.length; i1++) {
		const c_offset = (c_segments[i1]["routes"].length - 1) / 2;
		const c_coordinates = [[c_segments[i1]["start"]["lat"], c_segments[i1]["start"]["lon"]], [c_segments[i1]["end"]["lat"], c_segments[i1]["end"]["lon"]]];
		for (let i2 = 0; i2 < c_segments[i1]["routes"].length; i2++) {
			L.polyline(c_coordinates, {"color": c_segments[i1]["routes"][i2]["color"], "offset": 8 * (i2 - c_offset)}).addTo(map);
		}
	}
	
	for (let i1 in c_api["station"]) {
		const c_coordinates = [c_api["station"][i1]["lat"], c_api["station"][i1]["lon"]];
		L.circleMarker(c_coordinates, {"color": "#000000", "fillColor": "#c0c0c0", "fillOpacity": 1, "radius": 8, "weight": 4, "opacity": 1}).addTo(map);
		L.marker(c_coordinates, {"icon": L.divIcon({"html": c_api["station"][i1]["name"], className: "className", iconSize: [256, 16], iconAnchor: [-16, -16]})}).addTo(map);
	}
	
	for (let i1 in c_api["station"]) {
		const c_coordinates = [c_api["station"][i1]["lat"], c_api["station"][i1]["lon"]];
		map.setView(c_coordinates, 12);
		break;
	}
}

function f_xhr_get(a_url, a_type) {
	function f_promise(a_resolve, a_reject) {
		const c_xhr = new XMLHttpRequest();
		c_xhr.responseType = a_type;//"arraybuffer";
		c_xhr.open("get", a_url);
		function f_resolve() {
			a_resolve(c_xhr);
		}
		function f_reject() {
			a_reject("error");
		}
		c_xhr.onload = f_resolve;
		c_xhr.onerror = f_reject;
		c_xhr.send(null);
	}
	return new Promise(f_promise);
}

		//]]>
		</script>
	</body>
</html>
